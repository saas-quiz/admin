// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  email       String  @unique
  password    String
  googleId    String?
  role        Role[]  @default([USER])
  isOnBoarded Boolean @default(false)

  quizzes QuizParticipant[] // student quizzes
  // requests Request[] // student requests to join quiz

  adminOf  Group[]       @relation("GroupAdmin")
  memberOf GroupMember[]

  @@map("users")
}

model Group {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  desc String

  quizzes Quiz[]        @relation("GroupQuizzes")
  adminId String        @db.ObjectId
  admin   User          @relation("GroupAdmin", fields: [adminId], references: [id])
  members GroupMember[]

  QuizParticipants QuizParticipant[]

  @@unique([adminId, name])
  @@map("groups")
}

model GroupMember {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  groupId String @db.ObjectId

  Group Group @relation(fields: [groupId], references: [id])
  User  User  @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
  @@map("group_members")
}

model QuizParticipant {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  quizId  String @db.ObjectId
  groupId String @db.ObjectId
  User    User   @relation(fields: [userId], references: [id])
  Quiz    Quiz   @relation(fields: [quizId], references: [id])
  Group   Group  @relation(fields: [groupId], references: [id])

  answers ParticipantQuizAnswer[]

  @@map("quiz_participants")
}

model ParticipantQuizAnswer {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  answer          String
  questionId      String          @db.ObjectId
  Question        Question        @relation(fields: [questionId], references: [id])
  QuizId          String          @db.ObjectId
  ParticipantQuiz QuizParticipant @relation(fields: [QuizId], references: [id])

  @@unique([QuizId, questionId])
  @@map("participant_quiz_answers")
}

model Quiz {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  desc       String?
  duration   Int?
  maxMarks   Int?
  userInputs String[]

  footerHeading1 String?
  footerHeading2 String?
  footerText1    String?
  footerText2    String?
  footerLink     String?

  author  String
  groupId String @db.ObjectId
  group   Group  @relation("GroupQuizzes", fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  participants QuizParticipant[]
  questions    Question[]
  images       Image[]

  createdAt DateTime @default(now())
  published Boolean  @default(false)

  @@unique([groupId, title])
  @@map("quizzes")
}

model Question {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  title  String
  answer String
  quizId String @db.ObjectId
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  options                Option[]
  participantQuizAnswers ParticipantQuizAnswer[]

  @@unique([quizId, title])
  @@map("questions")
}

model Option {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  key        String
  value      String
  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([questionId, value])
  @@map("options")
}

model Image {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  key    String
  url    String
  quizId String @db.ObjectId
  quiz   Quiz   @relation(fields: [quizId], references: [id])

  @@map("images")
}
